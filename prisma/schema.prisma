generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Image {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  s3ImageURL       String
  randomizedURL    String
  isPublic         Boolean
  blurredImageData String?  @db.Text
  title            String?  @db.VarChar(100)
  description      String?  @db.VarChar(150)
  folder           Folder?  @relation(fields: [folderID], references: [id])
  folderID         String?
  user             User     @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID           String
}

model Folder {
  id          String  @id @default(cuid())
  title       String  @db.VarChar(100)
  description String?
  images      Image[]
  user        User    @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID      String
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  hidePrivateImages Boolean   @default(true)
  accounts          Account[]
  sessions          Session[]
  uploadedImages    Image[]
  folders           Folder[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
